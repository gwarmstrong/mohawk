#!/usr/bin/env python

import os
import click
from mohawk.classify import classify as classify_dl


@click.group()
def mohawk():
    pass


# TODO the sequence length should be determined by the model, and the error
#  is that the sequence data given does not have the right length
@mohawk.command()
@click.option('--model-path', type=click.Path(exists=True),
              help='A path to a trained model', required=True)
@click.option('--sequence-file', type=click.File('rb'),
              help='A sequence files', required=True)
@click.option('--output-file', type=click.File('wb'),
              help='The file to save the output', required=True)
@click.option('--length', type=int, default=150, required=False,
              help='The length of sequences to produce')
def classify(model_path, sequence_file, output_file, length):
    # TODO more options for fastq i/o
    format = 'fastq'
    format_kwargs = {'phred_offset': 33}
    results = classify_dl(model_path, length, sequence_file,
                          batch_size=640,
                          format_=format,
                          format_kwargs=format_kwargs)

    results.to_csv(output_file.name, sep='\t', index=False)


model_names_to_obj = dict()  # TODO give model name, map to object


@mohawk.command()
@click.option('--model-name', type=str,  # TODO check if it is in dict() ?
              help='The name of the model type to train on', required=True)
@click.option('--genome-ids', type=click.Path(exists=True),
              help='The file that includes genome ids to train on and the '
                   'number of reads to sample from each genome. Genomes '
                   'will be considered the same class, unless classes are '
                   'provided in an additional column',
              required=True)
@click.option('--external-validation-ids', default=None,
              type=click.Path(exists=True),
              help='A file containing genome ids that are used to evaluate '
                   'the model, but are not used for training. Same format as '
                   '`genome-ids`',
              required=False)  # TODO do check for whether it contains ids
# in `genome-ids`
@click.option('--lr', type=float, default=0.0001, required=False,
              help='Portion of simulation data to train on. (1-train_ratio) '
                   'will be used for assessing performance on the ')
@click.option('--epochs', type=int, default=100, required=False,
              help='Number of epochs to train models on')
@click.option('--summarize', type=bool, default=True, required=False,
              help='Whether to write out summaries')
@click.option('--log-dir', type=str, default='runs/', required=False,
              help='Directory to save model logs too')
@click.option('--summary-interval', type=int, default=5, required=False,
              help='Interval between epochs to summarize model on')
@click.option('--train-ratio', type=float, default=0.9, required=False,
              help='Portion of simulation data to train on. (1-train_ratio) '
                   'will be used for assessing performance on the ')
@click.option('--length', type=int, default=150, required=False,
              help='The length of sequences to produce')
@click.option('--seed', type=int, default=0, required=False,
              help='The random seed to use in data sampling')
@click.option('--concise-summary', type=bool, default=True, required=False,
              help='If True, only writes some select summary statistics.')
@click.option('--gpu', type=bool, default=False, required=False,
              help='Uses gpu (if available) when True')
@click.option('--batch-size', type=int, default=64, required=False,
              help='Size of batches to use for training')
def train(model_name, length):
    # TODO distribution should be figured out from proportion of reads for
    #  each genome and total reads figured out from sum of reads column in
    #  `genome-ids` file
    # TODO distribution noise False always for now, weight=False,
    # TODO check for gpu torch.cuda.is_available()
    pass

# TODO needs seed, number of reads to simulate, train_ratio, batch_size,
#  gpu, summary_interval, epochs, summarize, learning_rate, log_dir,
#  concise=True, config file


if __name__ == '__main__':
    mohawk()
